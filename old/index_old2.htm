<?php
include '/home/com3dapi/base/header.php';
?>

<!--------------------------- Menu Begin ----------------------------------------->
<?php
							LeftMenu($id);
?>

<!--------------------------- Menu End ------------------------------------------->
<?php
	include '/home/com3dapi/base/bodyInterval.php';
?>
<!--------------------------- Body Begin ---------------------------------------->
<br>
<br>
<br><h1>◈게임 서버◈</h1>
<br>
<br>
<br>
<br><h2>0 네트워크 인터페이스</h2>
<br>
<br>Windows를 배경으로한 네트워크의 IO 모델은 Blocking/NonBlocking, Select, Async Select, Event Select,
<br> Overlapped IO, IOCP 등이 있다. 이 중에서 게임에서 사용하는 IO모델은 서버에서는 IOCP를 사용하고,
<br>게임 클라이언트는 WindowsCE면 Select를, Windows 98 이후 버전에서는 주로 Event Select를 사용한다.
<br>또한 클라이언트에서 MFC를 기반으로 할 경우 Async Select를 사용하기도 한다. 만약 클라이언트에서
<br>쓰레드를 한개라도 줄이려고 한다면 WindowsCE의 경우처럼 Select모델도 좋은 대안이 될 수 있다.
<br>
<br>먼저 이들 IO모델에 대한 인터페이스와 클래스를 만들어보자.
<br>
<br><a href="eg26_network00.zip">eg26_network00.zip</a>
<br>
<br>
<br>
<br><h2>1 네트워크 유틸리티</h2>
<br>
<br>공통으로 사용하는 네트워크 함수들을 LnNetUtil.cpp/h파일에 모아놓자. 초기화 하는 과정을 Blocking모델
<br>속에서 구현할 것이다. 네트워크를 사용하기 위해서는 윈도우소켓을 초기화해야 하는데 중요한 함수는
<br>WSAStartup이다. 만약 현재의 아이피와 포트가 사용되고 있는지도 알아야 하기 때문에 WSAEnumProtocols
<br>함수로 사용이 되고 있는지 확인해야 한다. 사용이 되고 있다면( 다른프로그램에서도 쓸 수 있으므로) 당연히
<br>실패하게 만들어야 할 것이다.
<br>윈속라이브러리 초기화/ 해제가 만들어졌다면 또한 빼놓지 말아야 할 것이 있는데 에러에 대한 메시지
<br>출력이다. WSAGetLastError함수로 값을 가져올 수 있고 이를 문자열로 바꾸어 주는 함수가 FormatMessage함수
<br>이다. 이에 대한 함수도 추가시켜보자.
<br>호스트 프로그램을 컴파일을 하려면 WS2_32.LIB를 추가해야 한다.
<br>
<br><a href="eg26_network01.zip">eg26_network01.zip</a>
<br>
<br>
<br>
<br><h2>2 Pseudo-code로 구현</h2>
<br>
<br>게임에서는 TCP를 주로(거의 100%)사용한다. 또한 서버에서는 Accept와 Listen함수가 필요하다.
<br>클라이언트는 Connect함수만 필요하다. 이들에대한 인터페이스 함수를 pseudo-code로 만들고, 블로킹모델
<br>에서만 구현해 보도록 한다. 입력해야할 변수는 ip, port이다. 이들은 문자열로 전달한다.
<br>네트워크를 연결하기 위해서는 소켓와 소켓어드레스 구조체 또한 필요하다. 이 변수들은 NetBase클래스에
<br>넣어둔다.
<br>또한 네트워크프로그램에서 중요한 것은 공통함수들을 계속만들어 가야한다는 것이다. 이것은 나중에
<br>네트워크 운영에서 얻어지는 노하우의 축적과 자칫 미로로 빠질 수 있는 코드들에 대한 혼잡을 막을
<br>수 있다. 블로킹모델에서 Accept와 커넥션까지 코드를 만들어본다. 이후에는 쓰레드가 필요하기
<br>때문에 쓰레드 부분을 따로 정리해자.
<br>
<br><a href="eg26_network02.zip">eg26_network02.zip</a>
<br>
<br>
<br>
<br><h2>3 쓰레드</h2>
<br>
<br>위에서 만든 코드에 쓰레드 부분을 추가해보자. 클라이언트에서 필요한 쓰레드 수와 서버에서 필요한
<br>쓰레드 수를 생각해보자. 클라이언트는 최소한 Send/Receive용 쓰레드 두개가 필요하다. 반면에
<br>서버는 Accept용 쓰레드 한개가 더 더해서 최소한 3개가 된다. 간혹 Send용 쓰레드는 만들지 않기도
<br>하지만 Send쪽에서도 네트워크의 렉에 의해 패킷지연이 있을 수 있으므로 쓰레드를 만들어야 한다.
<br>
<br><a href="eg26_network03.zip">eg26_network03.zip</a>
<br>
<br>
<br>
<br><h2>4 큐(링버퍼)</h2>
<br>
<br>패킷이 분해되어 도착할 수 있다. 분해되더라도 순서는 지켜진다. 따라서 처음에 보낸 패킷이
<br>분해될 것을 예상해서 이것을 원래 보낸 패킷으로 만드는 과정이 필요하다. 가장 많이 사용되는
<br>방법이 큐를 이용하는 것인데 뒤에서 받은 패킷을 추가하고 앞에서 패킷을 꺼내오는 방식이다.
<br>꺼내올 때 완전한 패킷인지 아닌지 검사해야 하는데 보내는 쪽에서는 항상 패킷을 해더에 헤더를
<br>포함한 전체 패킷의 길이를 헤더에 기록해서 보내는 것이다. 
<br>
<br>+-------------------+--------------------- 
<br>|패킷전체길이(2Byte) &nbsp | 패킷
<br>+-------------------+--------------------- 
<br>
<br>2Byte로 할당한 것은 TCP인 경우 패킷은 최대 1446Byte 이기 때문이다. 이 값을 캐스팅해서 패킷의
<br>길이를 알아낸다.
<br>
<br><a href="eg26_network04.zip">eg26_network04.zip</a>
<br>
<br>
<br>
<br><h2>5 Event</h2>
<br>
<br>위의 코드에서 Send 쓰레드는 보낼 패킷의 유무에 상관없이 계속 돌고 있다. 쓰레드가 활성화
<br>되면 프로세스에도 부담을 주기 때문에 패킷이 없으면 보낼 필요가 없다. 이것을 제어하는 방법
<br>중의 하나가 Event를 이용하는 것이다. 이벤트는 네트워크용 쓰레드 동기화에서 중요한 역할을
<br>한다. 여기서는 Send부분만 Event를 만들어서 적용해보자.
<br>
<br><a href="eg26_network05.zip">eg26_network05.zip</a>
<br>
<br>
<br>
<br><h2>6 Non-Blocking구현</h2>
<br>
<br>Non-Blocking 모델은 기본적인 골격은 Blocking모델과 같다. 단지 소켓의 옵션만 바꾸어 주면 된다.
<br>소켓의 옵션을 바꾸어 주는 API함수는 ioctlsocket 이다.
<br>패킷을 보내는 방법중에 Naggle알고리듬이라는 것이 있다. 네트워크의 통신은 CPU에 비해서 엄청
<br>느리므로 패킷이 작으면 모아서 어느 정도 크기가 되면 보내는 방식이다. 소켓을 만들면 기본적으로
<br>Naggle상태가 On상태이다. 게임에서는 작은 패킷도 동기화를 위해서 그때마다 보내야 한다. 따라서
<br>Naggle알고리듬도 꺼놔야 한다. setsockopt함수를 통해서 Naggle를 비활성화 시킨다. 이부분도
<br>네트워크 유틸 파일에 모아 놓자.
<br>
<br><a href="eg26_network06.zip">eg26_network06.zip</a>
<br>
<br>
<br>
<br><h2>7 Select모델</h2>
<br>
<br>Blocking/Non-Blocking모델은 구현하기가 무척 간단하나 서버에서는 클라이언트가 늘어나면
<br>쓰레드도 같이 증가시켜야 한다. 같은 처리방식이면 쓰레드를 줄이는 것이 성능향상에 도움이
<br>되는데 Select, Event Select, AsyncSelect, Overlapped IO, IOCP는 좋은 대안이다.
<br>그중에서 Select모델은 윈도우에서는 많이 사용하지는 않는다. 하지만 WindowCE의 경우 Select이하
<br>모델을 쓰기 때문에 만들어 놓는 것이 좋다. 또한 클라이언트에서 쓰레드를 한개라도 더 줄이고
<br>싶다면 Select모델을 고려해 보는 것도 좋다. Select모델의 성능향상을 위해서는 소켓의
<br>옵션을 Non-Blocking으로 해놓아야 한다.
<br>
<br><a href="eg27_nw_select01.zip">eg27_nw_select01.zip</a>
<br>
<br>
<br>
<br><h2>8 Event Select모델</h2>
<br>
<br>Select 모델과 Blocking모델을 구현 할 수 있다면 Event Select모델은 의외로 쉽다.
<br>Event Select는 서버에서는 Blocking 모델의 Accept 쓰레드의 기능이 Recv쓰레드에 포함이 된다.
<br>EventSelect에 Accept만 연결해주면된다. 클라이언트는 서버와 거의 동일하다. 자료의 구조는
<br>그중에서 Select모델은 윈도우에서는 많이 사용하지는 않는다. 하지만 WindowCE의 경우 Select이하
<br>Select 모델과 많이 닮아 있다.
<br>
<br><a href="eg27_nw_selectE.zip">eg27_nw_selectE.zip</a>
<br>
<br>
<br>
<br><h2>9 IOCP 모델</h2>
<br>
<br>Async Select 모델은 Event Select의 윈도우 버전이라고 생각하면 된다. 이벤트 대신 윈도우의
<br>메지시지를 이용하기 때문에 설명은 넘어가도록 한다.
<br>IOCP 모델은 Completion Port를 구성하는 것으로 거의 결판이 난다. 처리의 과정은 파일의
<br>복사를 떠올리면 편하다. 자세한 설명은 Network소스에서 참조하고 여기서는 구현의 목적으로한다.
<br>Event Select 모델을 수정해서 IOCP를 구현해보도록하자.
<br>
<br><a href="eg28_nw_iocp01.zip">eg28_nw_iocp01.zip</a>
<br>
<br>
<br>AsyncSelect 모델을 추가한 코드
<br>
<br><a href="eg28_nw_iocp02.zip">eg28_nw_iocp02.zip</a>
<br>
<br>
<br>수정된 네트워크 엔진 완료코드
<br>
<br><a href="eg28_nw_iocp03.zip">eg28_nw_iocp03.zip</a>
<br>
<br>
<br>
<br><h2>10 DataBase(ODBC)</h2>
<br>
<br>네트워크 엔진과 데이터베이스 프로그램은 별개이다. 하지만 사용자에대한 모든 내용을 파일에
<br>저장하지 않고 데이터베이스시스템을 이용하는 것이 여러모로 이점이 많으므로 요즘은
<br>서버프로그램에서 데이터베이스에 대한 프로그램을 병행한다.
<br>가장 쉬운 ODBC모델에 대한 코드를 만들어 보자.
<br>
<br><a href="eg29_nw_io_db01.zip">eg29_nw_io_db01.zip</a>
<br>
<br>
<br>
<br><h2>11 DataBase(OLEDB)</h2>
<br>
<br>ADO 객체를 사용하는 OLEDB 클래스를 만들어 보자.
<br>
<br><a href="eg29_nw_io_db04.zip">eg29_nw_io_db04.zip</a>

<br>
<br>
<br>
<br>
<br>
<!--------------------------- Body end    ---------------------------------------->
<?php
	include '/home/com3dapi/base/tail.php';
?>

